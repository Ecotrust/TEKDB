from django.core.management.base import BaseCommand, CommandError
from TEKDB.models import *
import os
import sys
from TEKDB.settings import *
from django.utils import timezone

class Command(BaseCommand):

    help = 'Imports and rearranges SQL for PostgreSQL generated by Bullzip from Access DB'

    def add_arguments(self, parser):
        parser.add_argument('infile', nargs='+', type=str)

    def handle(self, *args, **options):
        FILE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        MANAGE_DIR = os.path.join(FILE_DIR,'..','..')
        infile = os.path.join(MANAGE_DIR, options['infile'][0])
        insert_script = os.path.join('scripts','insert.sql')
        import_output = os.path.join('scripts','import_output.txt')
        import_error = os.path.join('scripts','import_output.txt')

        now = timezone.now()

        ############################################
        print("Generating insert script")
        ############################################
        insert_dict = {}
        model_list = [
            'LookupPlanningUnit',
            'LookupTribe',
            'LookupHabitat',
            'Places',
            'LookupResourceGroup',
            'Resources',
            'LookupPartUsed',
            'LookupCustomaryUse',
            'LookupSeason',
            'LookupTiming',
            'PlacesResourceEvents',
            'LookupParticipants',
            'LookupTechniques',
            'LookupActivity',
            'ResourcesActivityEvents',
            'People',
            'LookupReferenceType',
            'LookupAuthorType',
            'Citations',
            'PlacesCitationEvents',
            'CurrentVersion',
            'LookupLocalityType',
            'Locality',
            'LocalityGISSelections',
            'LocalityPlaceResourceEvent',
            'LookupMediaType',
            'LookupUserInfo',
            'Media',
            'MediaCitationEvents',
            'PlaceAltIndigenousName',
            'PlaceGISSelections',
            'PlacesMediaEvents',
            'PlacesResourceCitationEvents',
            'PlacesResourceMediaEvents',
            'ResourceActivityCitationEvents',
            'ResourceActivityMediaEvents',
            'ResourceAltIndigenousName',
            'ResourceResourceEvents',
            'ResourcesCitationEvents',
            'ResourcesMediaEvents',
            'UserAccess',
            'Users',
        ]
        for model in model_list:
            insert_dict[model] = []
        with open(infile) as rf:
            for line in rf:
                line_split = line.split("\"")
                if "INSERT INTO \"" in line:
                    model = line_split[1]
                    if model == "Users":
                        users_split = line.split(")")
                        users_line = "%s, \"is_superuser\", \"is_staff\", \
                        \"is_active\", \"date_joined\")%s, E'0', E'0', E'1', '%s')%s" % (users_split[0],users_split[1],now,users_split[2])
                        insert_dict[model].append(users_line)
                    else:
                        insert_dict[model].append(line)
                elif "SELECT setval(" in line:
                    model = line_split[5]
                    insert_dict[model].append(line)

        with open(insert_script, "w") as wf:
            for model in model_list:
                for line in insert_dict[model]:
                    wf.write(line)

        ############################################
        print("Reverting migrations")
        ############################################
        manage_py = os.path.join(MANAGE_DIR, 'manage.py')
        os.system("%s migrate --fake TEKDB zero" % manage_py)

        ############################################
        print("Deleting migration files...")
        ############################################
        from pathlib import Path
        migrations_path = os.path.join(MANAGE_DIR,'TEKDB','migrations')
        migrations = Path(migrations_path)
        migration_files = [x for x in migrations.iterdir() if not x.name == '__init__.py' and not x.is_dir()]
        for migration_file in migration_files:
            try:
                os.remove(str(migration_file))
                print('%s deleted' % migration_file.name)
            except OSError as e:
                pass

        ############################################
        print("Dropping Database")
        ############################################
        import psycopg2
        dbname = 'tekdb'
        conn_psql = psycopg2.connect("dbname=postgres user=postgres")
        cur_psql = conn_psql.cursor()
        conn_psql.set_isolation_level(0)
        cur_psql.execute('DROP DATABASE if exists %s;' % dbname)
        print("Recreating Database")
        cur_psql.execute('CREATE DATABASE %s;' % dbname)
        cur_psql.close()
        conn_psql.close()

        ############################################
        print("Making updated migration files")
        ############################################
        os.system("%s makemigrations" % manage_py)

        ############################################
        print("Migrating database")
        ############################################
        os.system("%s migrate" % manage_py)

        ############################################
        print("Transferring old data into new database")
        ############################################
        from subprocess import Popen, PIPE
        out = open(import_output, 'w')
        sys.stdout = out
        error = open(import_error, 'w')

        p = Popen(['psql', '-U', 'postgres', '-d', dbname, '-f', insert_script], stdout=out)#, stderr=error)
        p.wait()

        ############################################
        # Setting Passwords
        ############################################
        from TEKDB.models import Users
        users = Users.objects.all()
        for user in users:
            user.set_password(user.password)
            if user.accesslevel.accesslevel == 'Administrator':
                user.is_superuser = True
                user.is_staff = True
            if user.accesslevel.accesslevel == 'Editor':
                user.is_staff = True
            user.save()
