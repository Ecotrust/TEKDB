# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-01 23:17
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Citations',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('citationid', models.AutoField(db_column='CitationID', primary_key=True, serialize=False)),
                ('referencetext', models.CharField(blank=True, db_column='ReferenceText', max_length=50, null=True, verbose_name='description')),
                ('authortype', models.CharField(blank=True, db_column='AuthorType', max_length=255, null=True)),
                ('authorprimary', models.CharField(blank=True, db_column='AuthorPrimary', max_length=255, null=True, verbose_name='primary author')),
                ('authorsecondary', models.CharField(blank=True, db_column='AuthorSecondary', max_length=255, null=True, verbose_name='secondary author')),
                ('placeofinterview', models.CharField(blank=True, db_column='PlaceofInterview', max_length=255, null=True)),
                ('year', models.IntegerField(blank=True, db_column='Year', null=True)),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('seriestitle', models.CharField(blank=True, db_column='SeriesTitle', max_length=255, null=True)),
                ('seriesvolume', models.CharField(blank=True, db_column='SeriesVolume', max_length=50, null=True)),
                ('serieseditor', models.CharField(blank=True, db_column='SeriesEditor', max_length=255, null=True)),
                ('publisher', models.CharField(blank=True, db_column='Publisher', max_length=100, null=True)),
                ('publishercity', models.CharField(blank=True, db_column='PublisherCity', max_length=255, null=True, verbose_name='city')),
                ('preparedfor', models.CharField(blank=True, db_column='PreparedFor', max_length=100, null=True)),
                ('comments', models.TextField(blank=True, db_column='Comments', null=True)),
            ],
            options={
                'verbose_name_plural': 'Citations',
                'verbose_name': 'Citation',
                'managed': True,
                'db_table': 'Citations',
            },
        ),
        migrations.CreateModel(
            name='CurrentVersion',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('backendversion', models.IntegerField(blank=True, db_column='BackendVersion', null=True)),
                ('frontendversion', models.IntegerField(blank=True, db_column='FrontendVersion', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'CurrentVersion',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('localityid', models.AutoField(db_column='LocalityID', primary_key=True, serialize=False)),
                ('englishname', models.CharField(blank=True, db_column='EnglishName', max_length=255, null=True, verbose_name='english name')),
                ('indigenousname', models.CharField(blank=True, db_column='IndigenousName', max_length=255, null=True, verbose_name='indigenous name')),
                ('localitytype', models.CharField(blank=True, choices=[('bay', 'bay'), ('beach', 'beach'), ('creek', 'creek'), ('estuary', 'estuary'), ('intertidal', 'intertidal'), ('lagoon', 'lagoon'), ('mainstem river', 'mainstem river'), ('offshore rocks', 'offshore rocks'), ('open ocean', 'open ocean'), ('river eddy', 'river eddy'), ('river mouth', 'river mouth'), ('side channel river', 'side channel river'), ('subtidal', 'subtidal')], db_column='LocalityType', max_length=255, null=True, verbose_name='type')),
            ],
            options={
                'verbose_name_plural': 'Localities',
                'verbose_name': 'Locality',
                'managed': True,
                'db_table': 'Locality',
            },
        ),
        migrations.CreateModel(
            name='LocalityGISSelections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('localityid', models.IntegerField(blank=True, db_column='LocalityID', null=True)),
                ('localitylabel', models.CharField(blank=True, db_column='LocalityLabel', max_length=255, null=True)),
                ('sourcefc', models.CharField(blank=True, db_column='SourceFC', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LocalityGISSelections',
            },
        ),
        migrations.CreateModel(
            name='LookupActivity',
            fields=[
                ('activity', models.CharField(db_column='Activity', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupActivity',
            },
        ),
        migrations.CreateModel(
            name='LookupAuthorType',
            fields=[
                ('authortype', models.CharField(db_column='AuthorType', max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupAuthorType',
            },
        ),
        migrations.CreateModel(
            name='LookupCustomaryUse',
            fields=[
                ('usedfor', models.CharField(db_column='UsedFor', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupCustomaryUse',
            },
        ),
        migrations.CreateModel(
            name='LookupHabitat',
            fields=[
                ('habitat', models.CharField(db_column='Habitat', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupHabitat',
            },
        ),
        migrations.CreateModel(
            name='LookupLocalityType',
            fields=[
                ('localitytype', models.CharField(db_column='LocalityType', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupLocalityType',
            },
        ),
        migrations.CreateModel(
            name='LookupMediaType',
            fields=[
                ('mediatype', models.CharField(db_column='MediaType', max_length=255, primary_key=True, serialize=False)),
                ('mediacategory', models.CharField(blank=True, db_column='MediaCategory', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupMediaType',
            },
        ),
        migrations.CreateModel(
            name='LookupParticipants',
            fields=[
                ('participants', models.CharField(db_column='Participants', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupParticipants',
            },
        ),
        migrations.CreateModel(
            name='LookupPartUsed',
            fields=[
                ('partused', models.CharField(db_column='PartUsed', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupPartUsed',
            },
        ),
        migrations.CreateModel(
            name='LookupPlanningUnit',
            fields=[
                ('planningunitid', models.IntegerField(db_column='PlanningUnitID', primary_key=True, serialize=False)),
                ('planningunitname', models.CharField(blank=True, db_column='PlanningUnitName', max_length=100, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupPlanningUnit',
            },
        ),
        migrations.CreateModel(
            name='LookupReferenceType',
            fields=[
                ('documenttype', models.CharField(db_column='DocumentType', max_length=25, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupReferenceType',
            },
        ),
        migrations.CreateModel(
            name='LookupResourceGroup',
            fields=[
                ('resourceclassificationgroup', models.CharField(db_column='ResourceClassificationGroup', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupResourceGroup',
            },
        ),
        migrations.CreateModel(
            name='LookupSeason',
            fields=[
                ('season', models.CharField(db_column='Season', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupSeason',
            },
        ),
        migrations.CreateModel(
            name='LookupTechniques',
            fields=[
                ('techniques', models.CharField(db_column='Techniques', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupTechniques',
            },
        ),
        migrations.CreateModel(
            name='LookupTiming',
            fields=[
                ('timing', models.CharField(db_column='Timing', max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupTiming',
            },
        ),
        migrations.CreateModel(
            name='LookupTribe',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('tribeunit', models.CharField(blank=True, db_column='TribeUnit', max_length=50, null=True)),
                ('tribe', models.CharField(blank=True, db_column='Tribe', max_length=100, null=True)),
                ('federaltribe', models.CharField(blank=True, db_column='FederalTribe', max_length=100, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupTribe',
            },
        ),
        migrations.CreateModel(
            name='LookupUserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=100, null=True)),
                ('usingcustomusername', models.BooleanField(db_column='UsingCustomUsername', default=False)),
                ('usertitle', models.CharField(blank=True, db_column='UserTitle', max_length=100, null=True)),
                ('useraffiliation', models.CharField(blank=True, db_column='UserAffiliation', max_length=100, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LookupUserInfo',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('mediaid', models.AutoField(db_column='MediaID', primary_key=True, serialize=False)),
                ('medianame', models.CharField(blank=True, db_column='MediaName', max_length=255, null=True, verbose_name='name')),
                ('mediadescription', models.TextField(blank=True, db_column='MediaDescription', null=True, verbose_name='description')),
                ('medialink', models.CharField(blank=True, db_column='MediaLink', max_length=255, null=True, verbose_name='link')),
            ],
            options={
                'verbose_name_plural': 'Media',
                'verbose_name': 'Medium',
                'managed': True,
                'db_table': 'Media',
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('personid', models.AutoField(db_column='PersonID', primary_key=True, serialize=False)),
                ('firstname', models.CharField(blank=True, db_column='FirstName', max_length=255, null=True)),
                ('lastname', models.CharField(blank=True, db_column='LastName', max_length=255, null=True)),
                ('yearborn', models.IntegerField(blank=True, db_column='YearBorn', null=True)),
                ('village', models.CharField(blank=True, db_column='Village', max_length=255, null=True)),
                ('relationshiptootherpeople', models.TextField(blank=True, db_column='RelationshipToOtherPeople', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'People',
            },
        ),
        migrations.CreateModel(
            name='PlaceAltIndigenousName',
            fields=[
                ('altindigenousnameid', models.AutoField(db_column='AltIndigenousNameID', primary_key=True, serialize=False)),
                ('altindigenousname', models.CharField(blank=True, db_column='AltIndigenousName', max_length=255, null=True, verbose_name='alternate indigenous name')),
            ],
            options={
                'verbose_name_plural': 'Places - Indigenous Names',
                'verbose_name': 'Place - Indigenous Name',
                'managed': True,
                'db_table': 'PlaceAltIndigenousName',
            },
        ),
        migrations.CreateModel(
            name='PlaceGISSelections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placeid', models.IntegerField(blank=True, db_column='PlaceID', null=True)),
                ('placelabel', models.CharField(blank=True, db_column='PlaceLabel', max_length=255, null=True)),
                ('sourcefc', models.CharField(blank=True, db_column='SourceFC', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PlaceGISSelections',
            },
        ),
        migrations.CreateModel(
            name='Places',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeid', models.AutoField(db_column='PlaceID', primary_key=True, serialize=False)),
                ('indigenousplacename', models.CharField(blank=True, db_column='IndigenousPlaceName', max_length=255, null=True, verbose_name='indigenous name')),
                ('indigenousplacenamemeaning', models.CharField(blank=True, db_column='IndigenousPlaceNameMeaning', max_length=255, null=True, verbose_name='english translation')),
                ('englishplacename', models.CharField(blank=True, db_column='EnglishPlaceName', max_length=255, null=True, verbose_name='english name')),
                ('primaryhabitat', models.CharField(blank=True, choices=[('Coastal Marsh', 'Coastal Marsh'), ('Deep Canyon', 'Deep Canyon'), ('Hard-bottom >100m', 'Hard-bottom >100m'), ('Hard-bottom 0-100m', 'Hard-bottom 0-100m'), ('Offshore Reefs', 'Offshore Reefs'), ('Offshore Rock', 'Offshore Rock'), ('Rocky Intertidal', 'Rocky Intertidal'), ('Sandy Beach', 'Sandy Beach'), ('Soft-bottom >100m', 'Soft-bottom >100m'), ('Soft-bottom 0-100m', 'Soft-bottom 0-100m'), ('Tidal Flats', 'Tidal Flats'), ('Other', 'Other')], db_column='PrimaryHabitat', max_length=100, null=True, verbose_name='primary habitat')),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'verbose_name_plural': 'Places',
                'verbose_name': 'Place',
                'managed': True,
                'db_table': 'Places',
            },
        ),
        migrations.CreateModel(
            name='PlacesResourceEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeresourceid', models.AutoField(db_column='PlaceResourceID', primary_key=True, serialize=False)),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('customaryuse', models.CharField(blank=True, db_column='CustomaryUse', max_length=255, null=True, verbose_name='customary use')),
                ('barterresource', models.BooleanField(db_column='BarterResource', default=False, verbose_name='barter resource?')),
                ('timing', models.CharField(blank=True, db_column='Timing', max_length=255, null=True)),
                ('january', models.BooleanField(db_column='January', default=False)),
                ('february', models.BooleanField(db_column='February', default=False)),
                ('march', models.BooleanField(db_column='March', default=False)),
                ('april', models.BooleanField(db_column='April', default=False)),
                ('may', models.BooleanField(db_column='May', default=False)),
                ('june', models.BooleanField(db_column='June', default=False)),
                ('july', models.BooleanField(db_column='July', default=False)),
                ('august', models.BooleanField(db_column='August', default=False)),
                ('september', models.BooleanField(db_column='September', default=False)),
                ('october', models.BooleanField(db_column='October', default=False)),
                ('november', models.BooleanField(db_column='November', default=False)),
                ('december', models.BooleanField(db_column='December', default=False)),
                ('year', models.IntegerField(blank=True, db_column='Year', null=True)),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'verbose_name_plural': 'Places - Resources',
                'verbose_name': 'Place - Resource',
                'managed': True,
                'db_table': 'PlacesResourceEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceAltIndigenousName',
            fields=[
                ('altindigenousnameid', models.AutoField(db_column='AltIndigenousNameID', primary_key=True, serialize=False)),
                ('resourceid', models.IntegerField(blank=True, db_column='ResourceID', null=True)),
                ('altindigenousname', models.CharField(blank=True, db_column='AltIndigenousName', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceAltIndigenousName',
            },
        ),
        migrations.CreateModel(
            name='ResourceResourceEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceid', models.IntegerField(db_column='ResourceID', primary_key=True, serialize=False)),
                ('altresourceid', models.IntegerField(db_column='AltResourceID')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceResourceEvents',
            },
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceid', models.AutoField(db_column='ResourceID', primary_key=True, serialize=False)),
                ('commonname', models.CharField(blank=True, db_column='CommonName', max_length=255, null=True, unique=True, verbose_name='common name')),
                ('indigenousname', models.CharField(blank=True, db_column='IndigenousName', max_length=255, null=True, verbose_name='indigenous name')),
                ('genus', models.CharField(blank=True, db_column='Genus', max_length=255, null=True, verbose_name='genus')),
                ('species', models.CharField(blank=True, db_column='Species', max_length=255, null=True)),
                ('specific', models.BooleanField(db_column='Specific', default=False)),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'verbose_name_plural': 'Resources',
                'verbose_name': 'Resource',
                'managed': True,
                'db_table': 'Resources',
            },
        ),
        migrations.CreateModel(
            name='ResourcesActivityEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceactivityid', models.AutoField(db_column='ResourceActivityID', primary_key=True, serialize=False)),
                ('relationshipdescription', models.TextField(blank=True, db_column='RelationshipDescription', null=True)),
                ('activityshortdescription', models.CharField(blank=True, db_column='ActivityShortDescription', max_length=255, null=True)),
                ('activitylongdescription', models.TextField(blank=True, db_column='ActivityLongDescription', null=True)),
                ('participants', models.CharField(blank=True, db_column='Participants', max_length=50, null=True)),
                ('technique', models.CharField(blank=True, db_column='Technique', max_length=255, null=True)),
                ('gear', models.CharField(blank=True, db_column='Gear', max_length=255, null=True)),
                ('customaryuse', models.CharField(blank=True, db_column='CustomaryUse', max_length=255, null=True)),
                ('timing', models.CharField(blank=True, db_column='Timing', max_length=255, null=True)),
                ('timingdescription', models.CharField(blank=True, db_column='TimingDescription', max_length=255, null=True)),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'managed': True,
                'db_table': 'ResourcesActivityEvents',
            },
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('accessid', models.AutoField(db_column='AccessID', primary_key=True, serialize=False)),
                ('accesslevel', models.CharField(blank=True, db_column='AccessLevel', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'UserAccess',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('userid', models.AutoField(db_column='UserID', primary_key=True, serialize=False)),
                ('username', models.CharField(db_column='UserName', max_length=20)),
                ('password', models.CharField(db_column='Password', max_length=20)),
                ('firstname', models.CharField(db_column='FirstName', max_length=255)),
                ('lastname', models.CharField(db_column='LastName', max_length=255)),
                ('affiliation', models.CharField(db_column='Affiliation', max_length=255)),
                ('title', models.CharField(db_column='Title', max_length=255)),
                ('accesslevel', models.IntegerField(db_column='AccessLevel')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'verbose_name': 'User',
                'managed': True,
                'db_table': 'Users',
            },
        ),
        migrations.CreateModel(
            name='LocalityPlaceResourceEvent',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeresourceid', models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.PlacesResourceEvents')),
            ],
            options={
                'managed': True,
                'db_table': 'LocalityPlaceResourceEvent',
            },
        ),
        migrations.CreateModel(
            name='MediaCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('mediaid', models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Media', verbose_name='media')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Media - Citations',
                'managed': True,
                'verbose_name': 'Medium - Citation',
                'db_table': 'MediaCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='PlacesCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeid', models.ForeignKey(db_column='PlaceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Places', verbose_name='place')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Places - Citations',
                'managed': True,
                'verbose_name': 'Place - Citation',
                'db_table': 'PlacesCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='PlacesMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeid', models.ForeignKey(db_column='PlaceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Places', verbose_name='place')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Places - Media',
                'managed': True,
                'verbose_name': 'Place - Medium',
                'db_table': 'PlacesMediaEvents',
            },
        ),
        migrations.CreateModel(
            name='PlacesResourceCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeresourceid', models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.PlacesResourceEvents')),
                ('citationid', models.IntegerField(db_column='CitationID')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True)),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PlacesResourceCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='PlacesResourceMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('placeresourceid', models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.PlacesResourceEvents')),
                ('mediaid', models.IntegerField(db_column='MediaID')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True)),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PlacesResourceMediaEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceActivityCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceactivityid', models.ForeignKey(db_column='ResourceActivityID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.ResourcesActivityEvents')),
                ('citationid', models.IntegerField(db_column='CitationID')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True)),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceActivityCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceActivityMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceactivityid', models.ForeignKey(db_column='ResourceActivityID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.ResourcesActivityEvents')),
                ('mediaid', models.IntegerField(db_column='MediaID')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True)),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceActivityMediaEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourcesCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceid', models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Resources', verbose_name='resource')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Resources - Citations',
                'managed': True,
                'verbose_name': 'Resource - Citation',
                'db_table': 'ResourcesCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourcesMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True)),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True)),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True)),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True)),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True)),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True)),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True)),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True)),
                ('resourceid', models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Resources', verbose_name='resource')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Resources - Media',
                'managed': True,
                'verbose_name': 'Resource - Medium',
                'db_table': 'ResourcesMediaEvents',
            },
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='partused',
            field=models.ForeignKey(blank=True, db_column='PartUsed', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupPartUsed'),
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='placeresourceid',
            field=models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.PlacesResourceEvents'),
        ),
        migrations.AddField(
            model_name='resources',
            name='resourceclassificationgroup',
            field=models.ForeignKey(blank=True, db_column='ResourceClassificationGroup', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupResourceGroup', verbose_name='broad species group'),
        ),
        migrations.AlterUniqueTogether(
            name='resourceresourceevents',
            unique_together=set([('resourceid', 'altresourceid')]),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='partused',
            field=models.ForeignKey(blank=True, db_column='PartUsed', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupPartUsed', verbose_name='part used'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='placeid',
            field=models.ForeignKey(db_column='PlaceID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Places'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='resourceid',
            field=models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Resources', verbose_name='resource'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='season',
            field=models.ForeignKey(blank=True, db_column='Season', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupSeason'),
        ),
        migrations.AddField(
            model_name='places',
            name='planningunitid',
            field=models.ForeignKey(blank=True, db_column='PlanningUnitID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupPlanningUnit', verbose_name='planning unit'),
        ),
        migrations.AddField(
            model_name='places',
            name='tribeid',
            field=models.ForeignKey(blank=True, db_column='TribeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupTribe', verbose_name='tribe'),
        ),
        migrations.AddField(
            model_name='placealtindigenousname',
            name='placeid',
            field=models.ForeignKey(blank=True, db_column='PlaceID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Places'),
        ),
        migrations.AddField(
            model_name='media',
            name='mediatype',
            field=models.ForeignKey(blank=True, db_column='MediaType', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupMediaType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='locality',
            name='placeid',
            field=models.ForeignKey(blank=True, db_column='PlaceID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Places'),
        ),
        migrations.AddField(
            model_name='citations',
            name='intervieweeid',
            field=models.ForeignKey(blank=True, db_column='IntervieweeID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interviewee', to='TEKDB.People'),
        ),
        migrations.AddField(
            model_name='citations',
            name='interviewerid',
            field=models.ForeignKey(blank=True, db_column='InterviewerID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interviewer', to='TEKDB.People'),
        ),
        migrations.AddField(
            model_name='citations',
            name='referencetype',
            field=models.ForeignKey(db_column='ReferenceType', max_length=255, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.LookupReferenceType', verbose_name='reference type'),
        ),
        migrations.AddField(
            model_name='resourcesmediaevents',
            name='mediaid',
            field=models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Media'),
        ),
        migrations.AddField(
            model_name='resourcescitationevents',
            name='citationid',
            field=models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Citations', verbose_name='citation'),
        ),
        migrations.AlterUniqueTogether(
            name='resourceactivitymediaevents',
            unique_together=set([('resourceactivityid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceactivitycitationevents',
            unique_together=set([('resourceactivityid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placesresourcemediaevents',
            unique_together=set([('placeresourceid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placesresourcecitationevents',
            unique_together=set([('placeresourceid', 'citationid')]),
        ),
        migrations.AddField(
            model_name='placesmediaevents',
            name='mediaid',
            field=models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Media', verbose_name='media'),
        ),
        migrations.AddField(
            model_name='placescitationevents',
            name='citationid',
            field=models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Citations', verbose_name='citation'),
        ),
        migrations.AddField(
            model_name='mediacitationevents',
            name='citationid',
            field=models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Citations', verbose_name='citation'),
        ),
        migrations.AddField(
            model_name='localityplaceresourceevent',
            name='localityid',
            field=models.ForeignKey(db_column='LocalityID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Locality'),
        ),
        migrations.AlterUniqueTogether(
            name='resourcesmediaevents',
            unique_together=set([('resourceid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourcescitationevents',
            unique_together=set([('resourceid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placesmediaevents',
            unique_together=set([('placeid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placescitationevents',
            unique_together=set([('placeid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='mediacitationevents',
            unique_together=set([('mediaid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='localityplaceresourceevent',
            unique_together=set([('placeresourceid', 'localityid')]),
        ),
    ]
