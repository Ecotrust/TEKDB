# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-06 23:31
from __future__ import unicode_literals

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Lookup', '0003_lookupactivity_lookupauthortype_lookuptechniques_lookupuserinfo'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Citations',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('citationid', models.AutoField(db_column='CitationID', primary_key=True, serialize=False)),
                ('referencetext', models.CharField(blank=True, db_column='ReferenceText', max_length=50, null=True, verbose_name='description')),
                ('authorprimary', models.CharField(blank=True, db_column='AuthorPrimary', max_length=255, null=True, verbose_name='primary author')),
                ('authorsecondary', models.CharField(blank=True, db_column='AuthorSecondary', max_length=255, null=True, verbose_name='secondary author')),
                ('placeofinterview', models.CharField(blank=True, db_column='PlaceofInterview', max_length=255, null=True, verbose_name='place of interview')),
                ('year', models.IntegerField(blank=True, db_column='Year', null=True)),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('seriestitle', models.CharField(blank=True, db_column='SeriesTitle', max_length=255, null=True, verbose_name='series title')),
                ('seriesvolume', models.CharField(blank=True, db_column='SeriesVolume', max_length=50, null=True, verbose_name='series volume')),
                ('serieseditor', models.CharField(blank=True, db_column='SeriesEditor', max_length=255, null=True, verbose_name='series editor')),
                ('publisher', models.CharField(blank=True, db_column='Publisher', max_length=100, null=True)),
                ('publishercity', models.CharField(blank=True, db_column='PublisherCity', max_length=255, null=True, verbose_name='city')),
                ('preparedfor', models.CharField(blank=True, db_column='PreparedFor', max_length=100, null=True, verbose_name='prepared_for')),
                ('comments', models.TextField(blank=True, db_column='Comments', null=True)),
                ('authortype', models.ForeignKey(blank=True, db_column='AuthorType', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupAuthorType', verbose_name='author type')),
                ('intervieweeid', models.ForeignKey(blank=True, db_column='IntervieweeID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interviewee', to='Lookup.People', verbose_name='interviewee')),
                ('interviewerid', models.ForeignKey(blank=True, db_column='InterviewerID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interviewer', to='Lookup.People', verbose_name='interviewer')),
                ('referencetype', models.ForeignKey(db_column='ReferenceType', max_length=255, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupReferenceType', verbose_name='reference type')),
            ],
            options={
                'verbose_name_plural': 'Citations',
                'verbose_name': 'Citation',
                'managed': True,
                'db_table': 'Citations',
            },
        ),
        migrations.CreateModel(
            name='CurrentVersion',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('backendversion', models.IntegerField(blank=True, db_column='BackendVersion', null=True, verbose_name='backend version')),
                ('frontendversion', models.IntegerField(blank=True, db_column='FrontendVersion', null=True, verbose_name='frontend version')),
            ],
            options={
                'managed': True,
                'db_table': 'CurrentVersion',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('localityid', models.AutoField(db_column='LocalityID', primary_key=True, serialize=False)),
                ('englishname', models.CharField(blank=True, db_column='EnglishName', max_length=255, null=True, verbose_name='english name')),
                ('indigenousname', models.CharField(blank=True, db_column='IndigenousName', max_length=255, null=True, verbose_name='indigenous name')),
                ('localitytype', models.ForeignKey(blank=True, db_column='LocalityType', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupLocalityType', verbose_name='type')),
            ],
            options={
                'verbose_name_plural': 'Localities',
                'verbose_name': 'Locality',
                'managed': True,
                'db_table': 'Locality',
            },
        ),
        migrations.CreateModel(
            name='LocalityGISSelections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('localitylabel', models.CharField(blank=True, db_column='LocalityLabel', max_length=255, null=True, verbose_name='locality label')),
                ('sourcefc', models.CharField(blank=True, db_column='SourceFC', max_length=255, null=True, verbose_name='source fc')),
                ('localityid', models.ForeignKey(blank=True, db_column='LocalityID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Locality', verbose_name='locality')),
            ],
            options={
                'managed': True,
                'db_table': 'LocalityGISSelections',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('mediaid', models.AutoField(db_column='MediaID', primary_key=True, serialize=False)),
                ('medianame', models.CharField(blank=True, db_column='MediaName', max_length=255, null=True, verbose_name='name')),
                ('mediadescription', models.TextField(blank=True, db_column='MediaDescription', null=True, verbose_name='description')),
                ('medialink', models.CharField(blank=True, db_column='MediaLink', max_length=255, null=True, verbose_name='link')),
            ],
            options={
                'verbose_name_plural': 'Media',
                'verbose_name': 'Medium',
                'managed': True,
                'db_table': 'Media',
            },
        ),
        migrations.CreateModel(
            name='PlaceAltIndigenousName',
            fields=[
                ('altindigenousnameid', models.AutoField(db_column='AltIndigenousNameID', primary_key=True, serialize=False)),
                ('altindigenousname', models.CharField(blank=True, db_column='AltIndigenousName', max_length=255, null=True, verbose_name='alternate indigenous name')),
            ],
            options={
                'verbose_name_plural': 'Places - Indigenous Names',
                'verbose_name': 'Place - Indigenous Name',
                'managed': True,
                'db_table': 'PlaceAltIndigenousName',
            },
        ),
        migrations.CreateModel(
            name='PlaceGISSelections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placelabel', models.CharField(blank=True, db_column='PlaceLabel', max_length=255, null=True, verbose_name='label')),
                ('sourcefc', models.CharField(blank=True, db_column='SourceFC', max_length=255, null=True, verbose_name='source fc')),
            ],
            options={
                'managed': True,
                'db_table': 'PlaceGISSelections',
            },
        ),
        migrations.CreateModel(
            name='Places',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeid', models.AutoField(db_column='PlaceID', primary_key=True, serialize=False)),
                ('indigenousplacename', models.CharField(blank=True, db_column='IndigenousPlaceName', max_length=255, null=True, verbose_name='indigenous name')),
                ('indigenousplacenamemeaning', models.CharField(blank=True, db_column='IndigenousPlaceNameMeaning', max_length=255, null=True, verbose_name='english translation')),
                ('englishplacename', models.CharField(blank=True, db_column='EnglishPlaceName', max_length=255, null=True, verbose_name='english name')),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'verbose_name_plural': 'Places',
                'verbose_name': 'Place',
                'managed': True,
                'db_table': 'Places',
            },
        ),
        migrations.CreateModel(
            name='PlacesResourceEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeresourceid', models.AutoField(db_column='PlaceResourceID', primary_key=True, serialize=False)),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('barterresource', models.BooleanField(db_column='BarterResource', default=False, verbose_name='barter resource?')),
                ('january', models.BooleanField(db_column='January', default=False)),
                ('february', models.BooleanField(db_column='February', default=False)),
                ('march', models.BooleanField(db_column='March', default=False)),
                ('april', models.BooleanField(db_column='April', default=False)),
                ('may', models.BooleanField(db_column='May', default=False)),
                ('june', models.BooleanField(db_column='June', default=False)),
                ('july', models.BooleanField(db_column='July', default=False)),
                ('august', models.BooleanField(db_column='August', default=False)),
                ('september', models.BooleanField(db_column='September', default=False)),
                ('october', models.BooleanField(db_column='October', default=False)),
                ('november', models.BooleanField(db_column='November', default=False)),
                ('december', models.BooleanField(db_column='December', default=False)),
                ('year', models.IntegerField(blank=True, db_column='Year', null=True)),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'verbose_name_plural': 'Places - Resources',
                'verbose_name': 'Place - Resource',
                'managed': True,
                'db_table': 'PlacesResourceEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceAltIndigenousName',
            fields=[
                ('altindigenousnameid', models.AutoField(db_column='AltIndigenousNameID', primary_key=True, serialize=False)),
                ('altindigenousname', models.CharField(blank=True, db_column='AltIndigenousName', max_length=255, null=True, verbose_name='alt indigenous name')),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceAltIndigenousName',
            },
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceid', models.AutoField(db_column='ResourceID', primary_key=True, serialize=False)),
                ('commonname', models.CharField(blank=True, db_column='CommonName', max_length=255, null=True, unique=True, verbose_name='common name')),
                ('indigenousname', models.CharField(blank=True, db_column='IndigenousName', max_length=255, null=True, verbose_name='indigenous name')),
                ('genus', models.CharField(blank=True, db_column='Genus', max_length=255, null=True, verbose_name='genus')),
                ('species', models.CharField(blank=True, db_column='Species', max_length=255, null=True)),
                ('specific', models.BooleanField(db_column='Specific', default=False)),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'verbose_name_plural': 'Resources',
                'verbose_name': 'Resource',
                'managed': True,
                'db_table': 'Resources',
            },
        ),
        migrations.CreateModel(
            name='ResourcesActivityEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceactivityid', models.AutoField(db_column='ResourceActivityID', primary_key=True, serialize=False)),
                ('relationshipdescription', models.TextField(blank=True, db_column='RelationshipDescription', null=True, verbose_name='relationship description')),
                ('activitylongdescription', models.TextField(blank=True, db_column='ActivityLongDescription', null=True, verbose_name='full activity description')),
                ('gear', models.CharField(blank=True, db_column='Gear', max_length=255, null=True)),
                ('customaryuse', models.CharField(blank=True, db_column='CustomaryUse', max_length=255, null=True, verbose_name='customary use')),
                ('timingdescription', models.CharField(blank=True, db_column='TimingDescription', max_length=255, null=True, verbose_name='timing description')),
                ('islocked', models.BooleanField(db_column='IsLocked', default=False, verbose_name='locked?')),
            ],
            options={
                'managed': True,
                'db_table': 'ResourcesActivityEvents',
            },
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('accessid', models.AutoField(db_column='AccessID', primary_key=True, serialize=False)),
                ('accesslevel', models.CharField(blank=True, db_column='AccessLevel', max_length=255, null=True, verbose_name='access level')),
            ],
            options={
                'managed': True,
                'db_table': 'UserAccess',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('userid', models.AutoField(db_column='UserID', primary_key=True, serialize=False)),
                ('username', models.CharField(db_column='UserName', max_length=20, unique=True, verbose_name='username')),
                ('password', models.CharField(db_column='Password', max_length=128, verbose_name='password')),
                ('first_name', models.CharField(db_column='FirstName', max_length=255, verbose_name='first name')),
                ('last_name', models.CharField(db_column='LastName', max_length=255, verbose_name='last name')),
                ('affiliation', models.CharField(db_column='Affiliation', max_length=255)),
                ('title', models.CharField(db_column='Title', max_length=255)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('accesslevel', models.ForeignKey(blank=True, db_column='AccessLevel', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.UserAccess', verbose_name='access level')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'verbose_name': 'User',
                'managed': True,
                'db_table': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LocalityPlaceResourceEvent',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeresourceid', models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.PlacesResourceEvents', verbose_name='place resource')),
            ],
            options={
                'managed': True,
                'db_table': 'LocalityPlaceResourceEvent',
            },
        ),
        migrations.CreateModel(
            name='MediaCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('mediaid', models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Media', verbose_name='media')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
                ('citationid', models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Citations', verbose_name='citation')),
            ],
            options={
                'db_table': 'MediaCitationEvents',
                'verbose_name_plural': 'Media - Citations',
                'managed': True,
                'verbose_name': 'Medium - Citation',
            },
        ),
        migrations.CreateModel(
            name='PlacesCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeid', models.ForeignKey(db_column='PlaceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Places', verbose_name='place')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
                ('citationid', models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Citations', verbose_name='citation')),
            ],
            options={
                'db_table': 'PlacesCitationEvents',
                'verbose_name_plural': 'Places - Citations',
                'managed': True,
                'verbose_name': 'Place - Citation',
            },
        ),
        migrations.CreateModel(
            name='PlacesMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeid', models.ForeignKey(db_column='PlaceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Places', verbose_name='place')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'db_table': 'PlacesMediaEvents',
                'verbose_name_plural': 'Places - Media',
                'managed': True,
                'verbose_name': 'Place - Medium',
            },
        ),
        migrations.CreateModel(
            name='PlacesResourceCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeresourceid', models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.PlacesResourceEvents', verbose_name='place resource')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
                ('citationid', models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Citations', verbose_name='citation')),
            ],
            options={
                'managed': True,
                'db_table': 'PlacesResourceCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='PlacesResourceMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('placeresourceid', models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.PlacesResourceEvents', verbose_name='place - resource')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PlacesResourceMediaEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceActivityCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceactivityid', models.ForeignKey(db_column='ResourceActivityID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.ResourcesActivityEvents', verbose_name='resource activity')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
                ('citationid', models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Citations', verbose_name='citation')),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceActivityCitationEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceActivityMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceactivityid', models.ForeignKey(db_column='ResourceActivityID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.ResourcesActivityEvents', verbose_name='resource activity')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceActivityMediaEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourceResourceEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceid', models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='resource_a', serialize=False, to='TEKDB.Resources')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
            ],
            options={
                'managed': True,
                'db_table': 'ResourceResourceEvents',
            },
        ),
        migrations.CreateModel(
            name='ResourcesCitationEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceid', models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Resources', verbose_name='resource')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=255, null=True)),
                ('citationid', models.ForeignKey(db_column='CitationID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Citations', verbose_name='citation')),
            ],
            options={
                'db_table': 'ResourcesCitationEvents',
                'verbose_name_plural': 'Resources - Citations',
                'managed': True,
                'verbose_name': 'Resource - Citation',
            },
        ),
        migrations.CreateModel(
            name='ResourcesMediaEvents',
            fields=[
                ('enteredbyname', models.CharField(blank=True, db_column='EnteredByName', max_length=25, null=True, verbose_name='entered by name')),
                ('enteredbytribe', models.CharField(blank=True, db_column='EnteredByTribe', max_length=100, null=True, verbose_name='entered by tribe')),
                ('enteredbytitle', models.CharField(blank=True, db_column='EnteredByTitle', max_length=100, null=True, verbose_name='entered by title')),
                ('enteredbydate', models.DateTimeField(auto_now_add=True, db_column='EnteredByDate', null=True, verbose_name='entered by date')),
                ('modifiedbyname', models.CharField(blank=True, db_column='ModifiedByName', max_length=25, null=True, verbose_name='modified by name')),
                ('modifiedbytitle', models.CharField(blank=True, db_column='ModifiedByTitle', max_length=100, null=True, verbose_name='modified by title')),
                ('modifiedbytribe', models.CharField(blank=True, db_column='ModifiedByTribe', max_length=100, null=True, verbose_name='modified by tribe')),
                ('modifiedbydate', models.DateTimeField(auto_now=True, db_column='ModifiedByDate', null=True, verbose_name='modified by date')),
                ('resourceid', models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='TEKDB.Resources', verbose_name='resource')),
                ('relationshipdescription', models.CharField(blank=True, db_column='RelationshipDescription', max_length=255, null=True, verbose_name='relationship description')),
                ('pages', models.CharField(blank=True, db_column='Pages', max_length=50, null=True)),
            ],
            options={
                'db_table': 'ResourcesMediaEvents',
                'verbose_name_plural': 'Resources - Media',
                'managed': True,
                'verbose_name': 'Resource - Medium',
            },
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='activityshortdescription',
            field=models.ForeignKey(blank=True, db_column='ActivityShortDescription', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupActivity', verbose_name='activity type'),
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='participants',
            field=models.ForeignKey(blank=True, db_column='Participants', max_length=50, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupParticipants'),
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='partused',
            field=models.ForeignKey(blank=True, db_column='PartUsed', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupPartUsed', verbose_name='part used'),
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='placeresourceid',
            field=models.ForeignKey(db_column='PlaceResourceID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.PlacesResourceEvents', verbose_name='place resource'),
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='technique',
            field=models.ForeignKey(blank=True, db_column='Technique', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupTechniques'),
        ),
        migrations.AddField(
            model_name='resourcesactivityevents',
            name='timing',
            field=models.ForeignKey(blank=True, db_column='Timing', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupTiming'),
        ),
        migrations.AddField(
            model_name='resources',
            name='resourceclassificationgroup',
            field=models.ForeignKey(blank=True, db_column='ResourceClassificationGroup', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupResourceGroup', verbose_name='broad species group'),
        ),
        migrations.AddField(
            model_name='resourcealtindigenousname',
            name='resourceid',
            field=models.ForeignKey(blank=True, db_column='ResourceID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Resources', verbose_name='resource'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='customaryuse',
            field=models.ForeignKey(blank=True, db_column='CustomaryUse', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupCustomaryUse', verbose_name='customary use'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='partused',
            field=models.ForeignKey(blank=True, db_column='PartUsed', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupPartUsed', verbose_name='part used'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='placeid',
            field=models.ForeignKey(db_column='PlaceID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Places', verbose_name='place'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='resourceid',
            field=models.ForeignKey(db_column='ResourceID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Resources', verbose_name='resource'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='season',
            field=models.ForeignKey(blank=True, db_column='Season', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupSeason'),
        ),
        migrations.AddField(
            model_name='placesresourceevents',
            name='timing',
            field=models.ForeignKey(blank=True, db_column='Timing', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupTiming'),
        ),
        migrations.AddField(
            model_name='places',
            name='planningunitid',
            field=models.ForeignKey(blank=True, db_column='PlanningUnitID', null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupPlanningUnit', verbose_name='planning unit'),
        ),
        migrations.AddField(
            model_name='places',
            name='primaryhabitat',
            field=models.ForeignKey(blank=True, db_column='PrimaryHabitat', max_length=100, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupHabitat', verbose_name='primary habitat'),
        ),
        migrations.AddField(
            model_name='places',
            name='tribeid',
            field=models.ForeignKey(blank=True, db_column='TribeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupTribe', verbose_name='tribe'),
        ),
        migrations.AddField(
            model_name='placegisselections',
            name='placeid',
            field=models.ForeignKey(blank=True, db_column='PlaceID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Places', verbose_name='place'),
        ),
        migrations.AddField(
            model_name='placealtindigenousname',
            name='placeid',
            field=models.ForeignKey(blank=True, db_column='PlaceID', null=True, on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Places', verbose_name='place'),
        ),
        migrations.AddField(
            model_name='media',
            name='mediatype',
            field=models.ForeignKey(blank=True, db_column='MediaType', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, to='Lookup.LookupMediaType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='locality',
            name='placeid',
            field=models.ForeignKey(blank=True, db_column='PlaceID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Places', verbose_name='place'),
        ),
        migrations.AddField(
            model_name='resourcesmediaevents',
            name='mediaid',
            field=models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Media', verbose_name='media'),
        ),
        migrations.AddField(
            model_name='resourceresourceevents',
            name='altresourceid',
            field=models.ForeignKey(db_column='AltResourceID', on_delete=django.db.models.deletion.CASCADE, related_name='resource_b', to='TEKDB.Resources'),
        ),
        migrations.AddField(
            model_name='resourceactivitymediaevents',
            name='mediaid',
            field=models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Media', verbose_name='media'),
        ),
        migrations.AddField(
            model_name='placesresourcemediaevents',
            name='mediaid',
            field=models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.CASCADE, to='TEKDB.Media', verbose_name='media'),
        ),
        migrations.AddField(
            model_name='placesmediaevents',
            name='mediaid',
            field=models.ForeignKey(db_column='MediaID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Media', verbose_name='media'),
        ),
        migrations.AddField(
            model_name='localityplaceresourceevent',
            name='localityid',
            field=models.ForeignKey(db_column='LocalityID', on_delete=django.db.models.deletion.DO_NOTHING, to='TEKDB.Locality', verbose_name='locality'),
        ),
        migrations.AlterUniqueTogether(
            name='resourcesmediaevents',
            unique_together=set([('resourceid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourcescitationevents',
            unique_together=set([('resourceid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceresourceevents',
            unique_together=set([('resourceid', 'altresourceid')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceactivitymediaevents',
            unique_together=set([('resourceactivityid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceactivitycitationevents',
            unique_together=set([('resourceactivityid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placesresourcemediaevents',
            unique_together=set([('placeresourceid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placesresourcecitationevents',
            unique_together=set([('placeresourceid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placesmediaevents',
            unique_together=set([('placeid', 'mediaid')]),
        ),
        migrations.AlterUniqueTogether(
            name='placescitationevents',
            unique_together=set([('placeid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='mediacitationevents',
            unique_together=set([('mediaid', 'citationid')]),
        ),
        migrations.AlterUniqueTogether(
            name='localityplaceresourceevent',
            unique_together=set([('placeresourceid', 'localityid')]),
        ),
    ]
